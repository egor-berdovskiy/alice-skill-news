from aiogram import Bot, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, FSInputFile

from loguru import logger

from helpers.keyboards import markups

from ..routers import user_router

from helpers import states

from helpers.smtp import SMTPService
from data.config import SMTP

from helpers.functions import WordGenerator

from services.user_service import UserService

from captcha.image import ImageCaptcha


@user_router.message(F.text == '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è üë§')
@user_router.message(F.text.lower().startswith('—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'))
@user_router.message(F.text == '–î—Ä—É–≥—É—é –∫–∞–ø—á—É ü§¨')
async def register_start(message: Message, bot: Bot, state: FSMContext):
    is_exist, user = await UserService.check(message.from_user.id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫–∫–∞—É–Ω—Ç
    if is_exist:
        await message.answer('–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª—å üôÑ', reply_markup=markups.menu())
        return

    resource_dir = 'resources/'
    roboto = resource_dir + 'fonts/roboto-regular.ttf'
    image = ImageCaptcha(fonts=[roboto], width=250, height=100)

    captcha_code = WordGenerator.generate()
    await state.update_data(captcha=captcha_code)

    data = image.generate(captcha_code)
    image.write(captcha_code, resource_dir + f'captcha/image/{message.from_user.id}.png')

    # Take photo
    captcha_image = FSInputFile(resource_dir + f'captcha/image/{message.from_user.id}.png')
    await bot.send_photo(message.chat.id, captcha_image, caption='–í–≤–µ–¥–∏ –∫–∞–ø—á—É —Å –∫–∞—Ä—Ç–∏–Ω–∫–∏ ‚úçÔ∏è', reply_markup=markups.get_new_captcha())

    await state.set_state(states.Register.captcha)

@user_router.message(states.Register.captcha)
async def get_captha_code(message: Message, state: FSMContext):
    captcha = (await state.get_data())['captcha']

    if captcha == message.text:
        await message.answer('–í–≤–µ–¥–∏ —Å–≤–æ—é –ø–æ—á—Ç—É –Ω–∞ –Ω–µ—ë –ø—Ä–∏–¥—ë—Ç –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä\n‚îî <code>bob@gmail.com</code>\n\n–í–≤–µ–¥–∏ –æ—Ç–º–µ–Ω–∞, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏')
        await state.set_state(states.Register.email)
    else:
        await message.answer('–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑', reply_markup=markups.get_new_captcha())

@user_router.message(states.Register.email)
async def get_email(message: Message, state: FSMContext):
    email = message.text.lower()

    if email.count('@') == 1:
        await state.update_data(email=email)
        await message.answer(f'–¢—ã –≤–≤—ë–ª: <code>{email}</code>, –æ—Ç–ø—Ä–∞–≤–ª—è—é –∫–æ–¥?', reply_markup=markups.confirm())
        await state.set_state(states.Register.confirm)
    else:
        await message.answer('–í–≤–µ–¥–∏ —Å–≤–æ—é –ø–æ—á—Ç—É –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ\n‚îî <code>bob@gmail.com</code>\n\n–ù–∞–ø–æ–º–Ω—é, —á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å –≤–≤–µ—Å—Ç–∏ –æ—Ç–º–µ–Ω–∞ –¥–ª—è –≤—ã—Ö–æ–¥–∞')

@user_router.message(states.Register.confirm)
async def get_confirm(message: Message, state: FSMContext):
    if message.text.lower() == '–¥–∞':
        await message.answer('–¢–∞–∫, –æ—Ç–ø—Ä–∞–≤–ª—è—é...')

        smtp_service = SMTPService()

        data = await state.get_data()
        secret = await smtp_service.send_confirm_code(data['email'])
        logger.debug(f'[{message.from_user.id}] @{message.from_user.username} -- {secret}')

        await message.answer(f'–û—Ç–ø—Ä–∞–≤–∏–ª, –∂–¥—É —Ç–≤–æ–π –∫–æ–¥')
        await state.update_data(secret=secret)

        await state.set_state(states.Register.code)
    elif message.text.lower() == '–Ω–µ—Ç':
        await message.answer('–í–≤–µ–¥–∏ —Å–≤–æ—é –ø–æ—á—Ç—É –Ω–∞ –Ω–µ—ë –ø—Ä–∏–¥—ë—Ç –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä\n‚îî <code>bob@gmail.com</code>')
        await state.set_state(states.Register.email)
    else:
        await message.answer('–ù–µ –ø–æ–Ω—è–ª —Ç–≤–æ–µ–≥–æ –æ—Ç–≤–µ—Ç–∞', reply_markup=markups.confirm())

@user_router.message(states.Register.code)
async def get_code(message: Message, state: FSMContext):
    user_code = message.text
    data = await state.get_data()

    if data['secret'] == user_code:
        await message.answer('–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å –∫–∞–Ω–∞–ª—ã –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã —Ö–æ—á–µ—à—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å ‚≠ê', reply_markup=markups.menu())
        response = await UserService.create_user(
            user_id=message.from_user.id,
            email=data['email'],
            username=message.from_user.username,
            full_name=message.from_user.full_name,
        )
        await state.clear()
    else:
        await message.answer('–ù–µ –≤–µ—Ä–Ω—ã–π –∫–æ–¥!')
        await state.set_state(states.Register.code)
