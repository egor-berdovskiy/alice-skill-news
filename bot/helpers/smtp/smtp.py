from aiosmtplib import SMTP
from aiosmtplib.errors import SMTPConnectTimeoutError

import uuid

from models.smtp.params import SmtpParams

from email.message import EmailMessage

from typing import Optional

from loguru import logger
import time


class Singleton(type):
    '''
    –ú–µ—Ç–∞–∫–ª–∞—Å—Å Singleton –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞ SMTPService
    '''
    _instances = {}
    def __call__(cls, *args, **kwargs):
        if cls not in cls._instances:
            cls._instances[cls] = super(Singleton, cls).__call__(*args, **kwargs)
        return cls._instances[cls]


class SMTPService(metaclass=Singleton):
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å SMTP-—Å–µ—Ä–≤–µ—Ä–æ–º –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã.
    """
    _smtp_params: SmtpParams
    _smtp: SMTP
    is_connected: bool

    def __init__(self, params: Optional[SmtpParams] = None) -> None:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–±—ä–µ–∫—Ç —Å–µ—Ä–≤–∏—Å–∞ SMTP —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.
        """
        self._smtp_params = params

        self._smtp = SMTP(
            hostname=params.host,
            port=params.port,
        )

        self.is_connected = self._smtp.is_connected


    async def connect(self):
        """
        –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ SMTP-—Å–µ—Ä–≤–µ—Ä—É –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Ö–æ–¥.
        """
        try:            
            await self._smtp.connect()
            await self._smtp.login(
                self._smtp_params.user,
                self._smtp_params.password
                )
            self.is_connected = self._smtp.is_connected
        except SMTPConnectTimeoutError as timeout_ex:
            logger.error(f'[üö®] {timeout_ex}')
            logger.info(f'[i] Trying connect again afrer 10 sec delay... SMTP service now NOT WORKING')
            time.sleep(10)
            logger.info(f'[‚ü≥] Lets retry connect!')
            await self.connect()
        except Exception as ex:
            logger.error(ex)
        finally:
            self.is_connected = self._smtp.is_connected


    async def kill(self):
        """
        –ó–∞–≤–µ—Ä—à–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å SMTP-—Å–µ—Ä–≤–µ—Ä–æ–º.
        """
        await self._smtp.quit()
        self.is_connected = self._smtp.is_connected

    async def send_confirm_code(self, to):
        '''
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–∏—Å—å–º–æ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å —Å —Å–µ–∫—Ä–µ—Ç–Ω—ã–º –∫–æ–¥–æ–º, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥.
        '''
        secret = str(uuid.uuid4()).split('-')[0]

        message = EmailMessage()
        message['From'] = self._smtp_params.user
        message['To'] = to
        message['Subject'] = '–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è'
        message.set_content(f'–í–∞—à –∫–æ–¥: {secret}')

        try:
            await self._smtp.send_message(message, recipients=to)
        except Exception as ex:
            logger.error(f'[!] {str(ex)}')

        return (secret)
