from aiogram import Bot, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from handlers.routers import user_router

from helpers.functions.word_generator import WordGenerator
from helpers.keyboards import markups
from helpers.fabrics import SessionCallback

from services.session_service import SessionService

from loguru import logger


class LinkState(StatesGroup):
    confirm = State()


@user_router.message(F.text.lower().startswith('—Å–≤—è–∑–∞—Ç—å'))
@user_router.message(Command(commands=['link']))
async def session(message: Message, state: FSMContext):
    await message.answer('–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Å–≤—è–∑—ã–≤–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞?', reply_markup=markups.confirm())
    await state.set_state(LinkState.confirm)


@user_router.message(LinkState.confirm)
async def get_confirm(message: Message, state: FSMContext):
    message_text = message.text.lower()

    if message_text == '–¥–∞':
        secret_word = WordGenerator.generate()
        is_exist, sessions = await SessionService.check(message.from_user.id)

        if is_exist:
            session_body = f'\n‚îî —Å–µ—Å—Å–∏—è <code>{sessions[0]["id"]}</code>'
            await message.answer(f'–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è{session_body}', reply_markup=markups.cancel_all_sessions())
            await state.clear()
        else:
            session = await SessionService.create(message.from_user.id, secret_word)
            await message.answer('–Ø —Å–∫–∞–∂—É —Ç–µ–±–µ —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ —Å–ª–æ–≤–æ, –∞ —Ç—ã –Ω–∞–∑–æ–≤–µ—à—å –µ–≥–æ –ê–ª–∏—Å–µ\n\n‚ùóÔ∏è –£ —Ç–µ–±—è –±—É–¥–µ—Ç —Ç—Ä–∏ –º–∏–Ω—É—Ç—ã, –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏—é –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Å—Å–∏—è –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç–∞')
            await message.answer(f'<code>{secret_word}</code>', reply_markup=markups.cancel_all_sessions())

    elif message_text == '–Ω–µ—Ç':
        await message.answer('üëå', reply_markup=markups.menu())
        await state.clear()
    else:
        await message.answer('–ù–µ –ø–æ–Ω—è–ª —Ç–≤–æ–π –æ—Ç–≤–µ—Ç')


@user_router.callback_query(SessionCallback.filter(F.action == 'close_all_sessions'))
async def close_all_sessions(callback_query: CallbackQuery, callback_data: SessionCallback, bot: Bot):
    await SessionService.close_all_sessions(callback_query.from_user.id)
    await callback_query.message.answer('–ó–∞–∫—Ä—ã–ª –≤—Å–µ —Å–µ—Å—Å–∏–∏ üëå', reply_markup=markups.menu())
    await bot.answer_callback_query(callback_query.id)
