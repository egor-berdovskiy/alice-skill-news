from aiogram import Bot, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from helpers.fabrics.fabric import MenuCallback
from helpers.keyboards import markups
from helpers.functions import render_profile

from services.user_service import UserService

from handlers.routers import user_router

from aiogram.fsm.state import State, StatesGroup

from loguru import logger

class ConfirmDeleteProfile(StatesGroup):
    confirm = State()


@user_router.callback_query(MenuCallback.filter(F.action == 'delete_profile'))
async def delete_profile(callback: CallbackQuery, bot: Bot, state: FSMContext):
    await callback.message.edit_reply_markup(reply_markup=markups.cry())
    await callback.message.answer('–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –±—É–¥–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å, –≤—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö –∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö –±—É–¥–µ—Ç <b>—É–¥–∞–ª–µ–Ω–∞</b>, —Ç—ã —É–≤–µ—Ä–µ–Ω?', reply_markup=markups.confirm())
    await state.set_state(ConfirmDeleteProfile.confirm)
    await bot.answer_callback_query(callback.id)


@user_router.message(ConfirmDeleteProfile.confirm)
async def get_confirm(message: Message, bot: Bot, state: FSMContext):
    if message.text.lower() == '–¥–∞':
        user = await UserService.findOneByUserId(user_id=message.from_user.id)
        try:
            await UserService.delete(user['id'])
            await message.answer('–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å —É–¥–∞–ª—ë–Ω üëã')
            await state.clear()
        except Exception as ex:
            await message.answer('–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏ ü™õ')
            await state.clear()
            logger.error(f'{ex}\nResponse: {ex.extra_info}')

    elif message.text.lower() == '–Ω–µ—Ç':
        user = await UserService.findOneByUserId(user_id=message.from_user.id)
        await render_profile(message, markups.profile_menu(), user)
        await state.clear()
    else:
        await message.answer('–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª ü§î', reply_markup=markups.confirm())
